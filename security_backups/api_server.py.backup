#!/usr/bin/env python3
"""
Z-Waifu Launcher GUI - REST API Server
REST API for remote management of the launcher.
"""

import os
import sys
import json
import threading
import time
import subprocess
import psutil
from datetime import datetime
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import jwt
import hashlib
import secrets

# Add the parent directory to the path so we can import the launcher
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from zwaifu_launcher_gui import LauncherGUI, TerminalEmulator
except ImportError:
    print("Error: Could not import launcher modules")
    sys.exit(1)

class APIServer:
    def __init__(self, launcher_gui, host='127.0.0.1', port=5001, secret_key=None):
        self.launcher_gui = launcher_gui
        self.host = host
        self.port = port
        self.secret_key = secret_key or secrets.token_hex(32)
        
        # Initialize Flask app
        self.app = Flask(__name__)
        self.app.config['SECRET_KEY'] = self.secret_key
        
        # Enable CORS
        CORS(self.app)
        
        # Rate limiting
        self.limiter = Limiter(
            app=self.app,
            key_func=get_remote_address,
            default_limits=["200 per day", "50 per hour"]
        )
        
        # API keys (in production, use a database)
        self.api_keys = {}
        self.generate_default_api_key()
        
        # Setup routes
        self.setup_routes()
        
        # Start monitoring thread
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(target=self.monitor_system, daemon=True)
        self.monitor_thread.start()
    
    def generate_default_api_key(self):
        """Generate a default API key for testing"""
        api_key = secrets.token_hex(32)
        self.api_keys[api_key] = {
            'name': 'Default API Key',
            'created': datetime.now().isoformat(),
            'permissions': ['read', 'write', 'admin']
        }
        print(f"Default API Key: {api_key}")
        return api_key
    
    def verify_api_key(self, api_key):
        """Verify API key and return permissions"""
        if api_key in self.api_keys:
            return self.api_keys[api_key]['permissions']
        return None
    
    def require_auth(self, required_permissions=None):
        """Decorator to require API key authentication"""
        def decorator(f):
            def decorated_function(*args, **kwargs):
                api_key = request.headers.get('X-API-Key')
                if not api_key:
                    return jsonify({'error': 'API key required'}), 401
                
                permissions = self.verify_api_key(api_key)
                if not permissions:
                    return jsonify({'error': 'Invalid API key'}), 401
                
                if required_permissions:
                    if not all(perm in permissions for perm in required_permissions):
                        return jsonify({'error': 'Insufficient permissions'}), 403
                
                return f(*args, **kwargs)
            return decorated_function
        return decorator
    
    def setup_routes(self):
        """Setup API routes"""
        
        @self.app.route('/api/v1/health', methods=['GET'])
        def health_check():
            """Health check endpoint"""
            return jsonify({
                'status': 'healthy',
                'timestamp': datetime.now().isoformat(),
                'version': '1.0.0'
            })
        
        @self.app.route('/api/v1/status', methods=['GET'])
        @self.limiter.limit("10 per minute")
        @self.require_auth(['read'])
        def get_status():
            """Get overall system status"""
            try:
                status = {
                    'timestamp': datetime.now().isoformat(),
                    'launcher_running': True,
                    'processes': self.get_process_status(),
                    'system_info': self.get_system_info(),
                    'config': self.get_config()
                }
                return jsonify(status)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/processes', methods=['GET'])
        @self.limiter.limit("30 per minute")
        @self.require_auth(['read'])
        def get_processes():
            """Get all process instances"""
            try:
                processes = self.get_process_status()
                return jsonify(processes)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/processes/<process_type>', methods=['GET', 'POST'])
        @self.limiter.limit("20 per minute")
        @self.require_auth(['read', 'write'])
        def manage_process_type(process_type):
            """Manage process type"""
            try:
                if request.method == 'GET':
                    # Get all instances of a process type
                    processes = self.get_process_status()
                    if process_type in processes:
                        return jsonify(processes[process_type])
                    else:
                        return jsonify({'error': f'Process type {process_type} not found'}), 404
                
                elif request.method == 'POST':
                    # Create new instance
                    data = request.get_json() or {}
                    result = self.create_process_instance(process_type, data)
                    return jsonify(result)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/processes/<process_type>/<int:instance_id>', methods=['GET', 'POST', 'DELETE', 'PUT'])
        @self.limiter.limit("30 per minute")
        @self.require_auth(['read', 'write'])
        def manage_process_instance(process_type, instance_id):
            """Manage individual process instances"""
            try:
                if request.method == 'GET':
                    # Get process status
                    status = self.get_process_instance_status(process_type, instance_id)
                    return jsonify(status)
                
                elif request.method == 'POST':
                    # Start process
                    data = request.get_json() or {}
                    result = self.start_process_instance(process_type, instance_id, data)
                    return jsonify(result)
                
                elif request.method == 'DELETE':
                    # Stop process
                    result = self.stop_process_instance(process_type, instance_id)
                    return jsonify(result)
                
                elif request.method == 'PUT':
                    # Restart process
                    result = self.restart_process_instance(process_type, instance_id)
                    return jsonify(result)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/processes/<process_type>/<int:instance_id>/terminal', methods=['GET', 'POST'])
        @self.limiter.limit("50 per minute")
        @self.require_auth(['read', 'write'])
        def manage_terminal(process_type, instance_id):
            """Manage terminal for a process"""
            try:
                if request.method == 'GET':
                    # Get terminal output
                    output = self.get_terminal_output(process_type, instance_id)
                    return jsonify({'output': output})
                
                elif request.method == 'POST':
                    # Send command to terminal
                    data = request.get_json()
                    if not data or 'command' not in data:
                        return jsonify({'error': 'Command required'}), 400
                    
                    result = self.send_terminal_command(process_type, instance_id, data['command'])
                    return jsonify(result)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/config', methods=['GET', 'PUT'])
        @self.limiter.limit("10 per minute")
        @self.require_auth(['read', 'write'])
        def manage_config():
            """Get or update configuration"""
            try:
                if request.method == 'GET':
                    config = self.get_config()
                    return jsonify(config)
                
                elif request.method == 'PUT':
                    data = request.get_json()
                    if not data:
                        return jsonify({'error': 'Configuration data required'}), 400
                    
                    result = self.update_config(data)
                    return jsonify(result)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/logs', methods=['GET'])
        @self.limiter.limit("20 per minute")
        @self.require_auth(['read'])
        def get_logs():
            """Get application logs"""
            try:
                logs = self.get_application_logs()
                return jsonify({'logs': logs})
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/analytics', methods=['GET'])
        @self.limiter.limit("10 per minute")
        @self.require_auth(['read'])
        def get_analytics():
            """Get performance analytics"""
            try:
                analytics = self.get_performance_analytics()
                return jsonify(analytics)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/actions/start-all', methods=['POST'])
        @self.limiter.limit("5 per minute")
        @self.require_auth(['write', 'admin'])
        def start_all_processes():
            """Start all processes"""
            try:
                result = self.start_all_processes()
                return jsonify(result)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/actions/stop-all', methods=['POST'])
        @self.limiter.limit("5 per minute")
        @self.require_auth(['write', 'admin'])
        def stop_all_processes():
            """Stop all processes"""
            try:
                result = self.stop_all_processes()
                return jsonify(result)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/actions/restart-all', methods=['POST'])
        @self.limiter.limit("5 per minute")
        @self.require_auth(['write', 'admin'])
        def restart_all_processes():
            """Restart all processes"""
            try:
                result = self.restart_all_processes()
                return jsonify(result)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/v1/keys', methods=['GET', 'POST'])
        @self.limiter.limit("10 per minute")
        @self.require_auth(['admin'])
        def manage_api_keys():
            """Manage API keys"""
            try:
                if request.method == 'GET':
                    # Return API keys (without the actual keys for security)
                    keys_info = {}
                    for key, info in self.api_keys.items():
                        keys_info[key[:8] + '...'] = {
                            'name': info['name'],
                            'created': info['created'],
                            'permissions': info['permissions']
                        }
                    return jsonify(keys_info)
                
                elif request.method == 'POST':
                    # Generate new API key
                    data = request.get_json() or {}
                    name = data.get('name', 'New API Key')
                    permissions = data.get('permissions', ['read'])
                    
                    api_key = secrets.token_hex(32)
                    self.api_keys[api_key] = {
                        'name': name,
                        'created': datetime.now().isoformat(),
                        'permissions': permissions
                    }
                    
                    return jsonify({
                        'success': True,
                        'api_key': api_key,
                        'message': 'API key created successfully'
                    })
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        # Error handlers
        @self.app.errorhandler(404)
        def not_found(error):
            return jsonify({'error': 'Endpoint not found'}), 404
        
        @self.app.errorhandler(429)
        def too_many_requests(error):
            return jsonify({'error': 'Rate limit exceeded'}), 429
        
        @self.app.errorhandler(500)
        def internal_error(error):
            return jsonify({'error': 'Internal server error'}), 500
    
    def get_process_status(self):
        """Get status of all process instances"""
        processes = {}
        
        if hasattr(self.launcher_gui, 'process_instance_tabs'):
            for process_type, instances in self.launcher_gui.process_instance_tabs.items():
                processes[process_type] = []
                
                for i, instance_data in enumerate(instances):
                    tab = instance_data.get('tab')
                    terminal = instance_data.get('terminal')
                    proc = instance_data.get('proc')
                    
                    status = {
                        'instance_id': i,
                        'name': f"{process_type} Instance {i+1}",
                        'status': 'Running' if proc and proc.poll() is None else 'Stopped',
                        'pid': proc.pid if proc else None,
                        'uptime': self.get_process_uptime(terminal),
                        'cpu_usage': self.get_process_cpu(proc),
                        'memory_usage': self.get_process_memory(proc),
                        'terminal_active': terminal is not None
                    }
                    
                    processes[process_type].append(status)
        
        return processes
    
    def get_process_instance_status(self, process_type, instance_id):
        """Get status of specific process instance"""
        if not hasattr(self.launcher_gui, 'process_instance_tabs'):
            return {'error': 'Process tracking not available'}
        
        if process_type not in self.launcher_gui.process_instance_tabs:
            return {'error': f'Process type {process_type} not found'}
        
        instances = self.launcher_gui.process_instance_tabs[process_type]
        if instance_id >= len(instances):
            return {'error': f'Instance {instance_id} not found'}
        
        instance_data = instances[instance_id]
        tab = instance_data.get('tab')
        terminal = instance_data.get('terminal')
        proc = instance_data.get('proc')
        
        status = {
            'instance_id': instance_id,
            'process_type': process_type,
            'name': f"{process_type} Instance {instance_id+1}",
            'status': 'Running' if proc and proc.poll() is None else 'Stopped',
            'pid': proc.pid if proc else None,
            'uptime': self.get_process_uptime(terminal),
            'cpu_usage': self.get_process_cpu(proc),
            'memory_usage': self.get_process_memory(proc),
            'terminal_active': terminal is not None
        }
        
        return status
    
    def start_process_instance(self, process_type, instance_id, data=None):
        """Start a process instance"""
        try:
            # Get batch file path
            batch_path = None
            if process_type == "Oobabooga":
                batch_path = self.launcher_gui.ooba_bat
            elif process_type == "Z-Waifu":
                batch_path = self.launcher_gui.zwaifu_bat
            elif process_type == "Ollama":
                batch_path = self.launcher_gui.ollama_bat
            elif process_type == "RVC":
                batch_path = self.launcher_gui.rvc_bat
            
            if not batch_path or not os.path.exists(batch_path):
                return {'error': f'Batch file not found for {process_type}'}
            
            # Create new process
            proc = subprocess.Popen([batch_path], cwd=os.path.dirname(batch_path), shell=False,
                                   stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)
            
            # Update instance data
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    instances[instance_id]['proc'] = proc
                    terminal = instances[instance_id]['terminal']
                    if terminal:
                        terminal.attach_process(proc, batch_path)
                        terminal.start_time = time.time()
            
            return {'success': True, 'message': f'Started {process_type} Instance {instance_id+1}'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def stop_process_instance(self, process_type, instance_id):
        """Stop a process instance"""
        try:
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    instance_data = instances[instance_id]
                    proc = instance_data.get('proc')
                    
                    if proc and proc.poll() is None:
                        proc.terminate()
                        return {'success': True, 'message': f'Stopped {process_type} Instance {instance_id+1}'}
                    else:
                        return {'error': f'Process {process_type} Instance {instance_id+1} is not running'}
            
            return {'error': f'Instance {instance_id} not found'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def restart_process_instance(self, process_type, instance_id):
        """Restart a process instance"""
        try:
            # Stop first
            stop_result = self.stop_process_instance(process_type, instance_id)
            if 'error' in stop_result:
                return stop_result
            
            # Wait a moment
            time.sleep(1)
            
            # Start again
            start_result = self.start_process_instance(process_type, instance_id)
            return start_result
            
        except Exception as e:
            return {'error': str(e)}
    
    def create_process_instance(self, process_type, data=None):
        """Create a new process instance"""
        try:
            # This would create a new tab and instance
            # For now, we'll just return success
            return {'success': True, 'message': f'Created new {process_type} instance'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_config(self):
        """Get current configuration"""
        config = {
            'ooba_bat': self.launcher_gui.ooba_bat,
            'zwaifu_bat': self.launcher_gui.zwaifu_bat,
            'ollama_bat': self.launcher_gui.ollama_bat,
            'rvc_bat': self.launcher_gui.rvc_bat,
            'theme': getattr(self.launcher_gui, 'current_theme', 'light'),
            'auto_start_ooba': getattr(self.launcher_gui, 'auto_start_ooba', False),
            'auto_start_zwaifu': getattr(self.launcher_gui, 'auto_start_zwaifu', False),
            'auto_start_ollama': getattr(self.launcher_gui, 'auto_start_ollama', False),
            'auto_start_rvc': getattr(self.launcher_gui, 'auto_start_rvc', False)
        }
        return config
    
    def update_config(self, data):
        """Update configuration"""
        try:
            # Update configuration based on data
            if 'ooba_bat' in data:
                self.launcher_gui.ooba_bat = data['ooba_bat']
            if 'zwaifu_bat' in data:
                self.launcher_gui.zwaifu_bat = data['zwaifu_bat']
            if 'ollama_bat' in data:
                self.launcher_gui.ollama_bat = data['ollama_bat']
            if 'rvc_bat' in data:
                self.launcher_gui.rvc_bat = data['rvc_bat']
            
            # Save configuration
            self.launcher_gui.save_config()
            
            return {'success': True, 'message': 'Configuration updated'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_terminal_output(self, process_type, instance_id):
        """Get terminal output for a process"""
        try:
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    terminal = instances[instance_id].get('terminal')
                    if terminal and hasattr(terminal, 'output'):
                        return terminal.output.get('1.0', 'end-1c')
            
            return "Terminal output not available"
            
        except Exception as e:
            return f"Error getting terminal output: {e}"
    
    def send_terminal_command(self, process_type, instance_id, command):
        """Send command to terminal"""
        try:
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    terminal = instances[instance_id].get('terminal')
                    proc = instances[instance_id].get('proc')
                    
                    if terminal and proc and proc.poll() is None:
                        # Send command to process
                        proc.stdin.write(command + '\n')
                        proc.stdin.flush()
                        return {'success': True, 'message': f'Sent command: {command}'}
            
            return {'error': 'Process not available or not running'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_application_logs(self):
        """Get application logs"""
        try:
            log_file = os.path.join(os.path.dirname(__file__), 'launcher_log.txt')
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = f.readlines()
                return logs[-100:]  # Last 100 lines
            else:
                return ["No log file found"]
        except Exception as e:
            return [f"Error reading logs: {e}"]
    
    def get_performance_analytics(self):
        """Get performance analytics"""
        try:
            analytics = {
                'timestamp': datetime.now().isoformat(),
                'system': {
                    'cpu_percent': psutil.cpu_percent(interval=1),
                    'memory_percent': psutil.virtual_memory().percent,
                    'disk_usage': psutil.disk_usage('/').percent
                },
                'processes': self.get_process_status(),
                'launcher_memory': self.get_launcher_memory_usage()
            }
            return analytics
        except Exception as e:
            return {'error': str(e)}
    
    def start_all_processes(self):
        """Start all processes"""
        try:
            # Implementation would iterate through all processes
            return {'success': True, 'message': 'Started all processes'}
        except Exception as e:
            return {'error': str(e)}
    
    def stop_all_processes(self):
        """Stop all processes"""
        try:
            # Implementation would iterate through all processes
            return {'success': True, 'message': 'Stopped all processes'}
        except Exception as e:
            return {'error': str(e)}
    
    def restart_all_processes(self):
        """Restart all processes"""
        try:
            # Implementation would iterate through all processes
            return {'success': True, 'message': 'Restarted all processes'}
        except Exception as e:
            return {'error': str(e)}
    
    def get_process_uptime(self, terminal):
        """Get process uptime"""
        try:
            if terminal and hasattr(terminal, 'start_time'):
                elapsed = int(time.time() - terminal.start_time)
                h, m, s = elapsed // 3600, (elapsed % 3600) // 60, elapsed % 60
                return f"{h:02}:{m:02}:{s:02}"
            return "Unknown"
        except:
            return "Unknown"
    
    def get_process_cpu(self, proc):
        """Get process CPU usage"""
        try:
            if proc and proc.poll() is None:
                p = psutil.Process(proc.pid)
                return f"{p.cpu_percent(interval=0.1):.1f}%"
            return "N/A"
        except:
            return "N/A"
    
    def get_process_memory(self, proc):
        """Get process memory usage"""
        try:
            if proc and proc.poll() is None:
                p = psutil.Process(proc.pid)
                mem_mb = p.memory_info().rss / (1024 * 1024)
                return f"{mem_mb:.1f} MB"
            return "N/A"
        except:
            return "N/A"
    
    def get_system_info(self):
        """Get system information"""
        try:
            return {
                'cpu_count': psutil.cpu_count(),
                'memory_total': f"{psutil.virtual_memory().total / (1024**3):.1f} GB",
                'disk_total': f"{psutil.disk_usage('/').total / (1024**3):.1f} GB",
                'platform': sys.platform,
                'python_version': sys.version
            }
        except Exception as e:
            return {'error': str(e)}
    
    def get_launcher_memory_usage(self):
        """Get launcher memory usage"""
        try:
            process = psutil.Process()
            mem_mb = process.memory_info().rss / (1024 * 1024)
            return f"{mem_mb:.1f} MB"
        except:
            return "Unknown"
    
    def monitor_system(self):
        """Monitor system and update metrics"""
        while self.monitoring_active:
            try:
                # Update system metrics
                time.sleep(5)
            except Exception as e:
                print(f"Error in system monitoring: {e}")
                time.sleep(10)
    
    def start(self):
        """Start the API server"""
        print(f"Starting Z-Waifu Launcher API Server on http://{self.host}:{self.port}")
        print(f"API Documentation: http://{self.host}:{self.port}/api/v1/health")
        
        # Start Flask app
        self.app.run(host=self.host, port=self.port, debug=False)
    
    def stop(self):
        """Stop the API server"""
        self.monitoring_active = False
        print("API server stopped")

def create_api_server(launcher_gui, host='127.0.0.1', port=5001, secret_key=None):
    """Create and start API server"""
    try:
        api_server = APIServer(launcher_gui, host, port, secret_key)
        return api_server
    except Exception as e:
        print(f"Error creating API server: {e}")
        return None

if __name__ == "__main__":
    # Test API server
    print("Z-Waifu Launcher API Server")
    print("This module provides REST API for remote management of the launcher.")
    print("To use, import and call create_api_server() with your launcher instance.") 