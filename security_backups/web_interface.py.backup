#!/usr/bin/env python3
"""
Z-Waifu Launcher GUI - Web Interface
Browser-based management interface for the launcher.
"""

import os
import sys
import json
import threading
import time
import subprocess
import psutil
from datetime import datetime
from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_socketio import SocketIO, emit
import webbrowser
from typing import Dict, List, Any, Optional
import logging

# Add the parent directory to the path so we can import the launcher
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from zwaifu_launcher_gui import LauncherGUI, TerminalEmulator
except ImportError:
    print("Error: Could not import launcher modules")
    sys.exit(1)

class WebInterface:
    def __init__(self, launcher_gui, host='127.0.0.1', port=8080):
        self.launcher_gui = launcher_gui
        self.host = host
        self.port = port
        self.app = Flask(__name__)
        self.app.config['SECRET_KEY'] = 'zwaifu-launcher-web-interface'
        self.socketio = SocketIO(self.app, cors_allowed_origins="*")
        
        # Store process instances
        self.process_instances = {}
        self.terminal_outputs = {}
        
        # Setup routes
        self.setup_routes()
        
        # Start monitoring thread
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(target=self.monitor_processes, daemon=True)
        self.monitor_thread.start()
    
    def setup_routes(self):
        """Setup Flask routes"""
        
        @self.app.route('/')
        def index():
            """Main dashboard page"""
            return render_template('dashboard.html')
        
        @self.app.route('/api/status')
        def get_status():
            """Get overall launcher status"""
            try:
                status = {
                    'timestamp': datetime.now().isoformat(),
                    'launcher_running': True,
                    'processes': self.get_process_status(),
                    'system_info': self.get_system_info(),
                    'config': self.get_config()
                }
                return jsonify(status)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/processes')
        def get_processes():
            """Get all process instances"""
            try:
                processes = self.get_process_status()
                return jsonify(processes)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/process/<process_type>/<int:instance_id>', methods=['GET', 'POST', 'DELETE'])
        def manage_process(process_type, instance_id):
            """Manage individual process instances"""
            try:
                if request.method == 'GET':
                    # Get process status
                    status = self.get_process_instance_status(process_type, instance_id)
                    return jsonify(status)
                
                elif request.method == 'POST':
                    # Start process
                    data = request.get_json()
                    result = self.start_process_instance(process_type, instance_id, data)
                    return jsonify(result)
                
                elif request.method == 'DELETE':
                    # Stop process
                    result = self.stop_process_instance(process_type, instance_id)
                    return jsonify(result)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/process/<process_type>', methods=['POST'])
        def create_process(process_type):
            """Create new process instance"""
            try:
                data = request.get_json()
                result = self.create_process_instance(process_type, data)
                return jsonify(result)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/config', methods=['GET', 'PUT'])
        def manage_config():
            """Get or update configuration"""
            try:
                if request.method == 'GET':
                    config = self.get_config()
                    return jsonify(config)
                
                elif request.method == 'PUT':
                    data = request.get_json()
                    result = self.update_config(data)
                    return jsonify(result)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/terminal/<process_type>/<int:instance_id>')
        def get_terminal_output(process_type, instance_id):
            """Get terminal output for a process"""
            try:
                output = self.get_terminal_output(process_type, instance_id)
                return jsonify({'output': output})
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/terminal/<process_type>/<int:instance_id>', methods=['POST'])
        def send_terminal_input(process_type, instance_id):
            """Send input to terminal"""
            try:
                data = request.get_json()
                command = data.get('command', '')
                result = self.send_terminal_command(process_type, instance_id, command)
                return jsonify(result)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/logs')
        def get_logs():
            """Get application logs"""
            try:
                logs = self.get_application_logs()
                return jsonify({'logs': logs})
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/analytics')
        def get_analytics():
            """Get performance analytics"""
            try:
                analytics = self.get_performance_analytics()
                return jsonify(analytics)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        # WebSocket events
        @self.socketio.on('connect')
        def handle_connect():
            """Handle client connection"""
            emit('status', {'message': 'Connected to Z-Waifu Launcher Web Interface'})
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            """Handle client disconnection"""
            print('Client disconnected')
        
        @self.socketio.on('request_status')
        def handle_status_request():
            """Handle status request from client"""
            status = self.get_process_status()
            emit('status_update', status)
    
    def get_process_status(self):
        """Get status of all process instances"""
        processes = {}
        
        if hasattr(self.launcher_gui, 'process_instance_tabs'):
            for process_type, instances in self.launcher_gui.process_instance_tabs.items():
                processes[process_type] = []
                
                for i, instance_data in enumerate(instances):
                    tab = instance_data.get('tab')
                    terminal = instance_data.get('terminal')
                    proc = instance_data.get('proc')
                    
                    status = {
                        'instance_id': i,
                        'name': f"{process_type} Instance {i+1}",
                        'status': 'Running' if proc and proc.poll() is None else 'Stopped',
                        'pid': proc.pid if proc else None,
                        'uptime': self.get_process_uptime(terminal),
                        'cpu_usage': self.get_process_cpu(proc),
                        'memory_usage': self.get_process_memory(proc),
                        'terminal_active': terminal is not None
                    }
                    
                    processes[process_type].append(status)
        
        return processes
    
    def get_process_instance_status(self, process_type, instance_id):
        """Get status of specific process instance"""
        if not hasattr(self.launcher_gui, 'process_instance_tabs'):
            return {'error': 'Process tracking not available'}
        
        if process_type not in self.launcher_gui.process_instance_tabs:
            return {'error': f'Process type {process_type} not found'}
        
        instances = self.launcher_gui.process_instance_tabs[process_type]
        if instance_id >= len(instances):
            return {'error': f'Instance {instance_id} not found'}
        
        instance_data = instances[instance_id]
        tab = instance_data.get('tab')
        terminal = instance_data.get('terminal')
        proc = instance_data.get('proc')
        
        status = {
            'instance_id': instance_id,
            'process_type': process_type,
            'name': f"{process_type} Instance {instance_id+1}",
            'status': 'Running' if proc and proc.poll() is None else 'Stopped',
            'pid': proc.pid if proc else None,
            'uptime': self.get_process_uptime(terminal),
            'cpu_usage': self.get_process_cpu(proc),
            'memory_usage': self.get_process_memory(proc),
            'terminal_active': terminal is not None
        }
        
        return status
    
    def start_process_instance(self, process_type, instance_id, data=None):
        """Start a process instance"""
        try:
            # Get batch file path
            batch_path = None
            if process_type == "Oobabooga":
                batch_path = self.launcher_gui.ooba_bat
            elif process_type == "Z-Waifu":
                batch_path = self.launcher_gui.zwaifu_bat
            elif process_type == "Ollama":
                batch_path = self.launcher_gui.ollama_bat
            elif process_type == "RVC":
                batch_path = self.launcher_gui.rvc_bat
            
            if not batch_path or not os.path.exists(batch_path):
                return {'error': f'Batch file not found for {process_type}'}
            
            # Create new process
            proc = subprocess.Popen([batch_path], cwd=os.path.dirname(batch_path), shell=False,
                                   stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)
            
            # Update instance data
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    instances[instance_id]['proc'] = proc
                    terminal = instances[instance_id]['terminal']
                    if terminal:
                        terminal.attach_process(proc, batch_path)
                        terminal.start_time = time.time()
            
            return {'success': True, 'message': f'Started {process_type} Instance {instance_id+1}'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def stop_process_instance(self, process_type, instance_id):
        """Stop a process instance"""
        try:
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    instance_data = instances[instance_id]
                    proc = instance_data.get('proc')
                    
                    if proc and proc.poll() is None:
                        proc.terminate()
                        return {'success': True, 'message': f'Stopped {process_type} Instance {instance_id+1}'}
                    else:
                        return {'error': f'Process {process_type} Instance {instance_id+1} is not running'}
            
            return {'error': f'Instance {instance_id} not found'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def create_process_instance(self, process_type, data=None):
        """Create a new process instance"""
        try:
            # This would create a new tab and instance
            # For now, we'll just return success
            return {'success': True, 'message': f'Created new {process_type} instance'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_config(self):
        """Get current configuration"""
        config = {
            'ooba_bat': self.launcher_gui.ooba_bat,
            'zwaifu_bat': self.launcher_gui.zwaifu_bat,
            'ollama_bat': self.launcher_gui.ollama_bat,
            'rvc_bat': self.launcher_gui.rvc_bat,
            'theme': getattr(self.launcher_gui, 'current_theme', 'light'),
            'auto_start_ooba': getattr(self.launcher_gui, 'auto_start_ooba', False),
            'auto_start_zwaifu': getattr(self.launcher_gui, 'auto_start_zwaifu', False),
            'auto_start_ollama': getattr(self.launcher_gui, 'auto_start_ollama', False),
            'auto_start_rvc': getattr(self.launcher_gui, 'auto_start_rvc', False)
        }
        return config
    
    def update_config(self, data):
        """Update configuration"""
        try:
            # Update configuration based on data
            if 'ooba_bat' in data:
                self.launcher_gui.ooba_bat = data['ooba_bat']
            if 'zwaifu_bat' in data:
                self.launcher_gui.zwaifu_bat = data['zwaifu_bat']
            if 'ollama_bat' in data:
                self.launcher_gui.ollama_bat = data['ollama_bat']
            if 'rvc_bat' in data:
                self.launcher_gui.rvc_bat = data['rvc_bat']
            
            # Save configuration
            self.launcher_gui.save_config()
            
            return {'success': True, 'message': 'Configuration updated'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_terminal_output(self, process_type, instance_id):
        """Get terminal output for a process"""
        try:
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    terminal = instances[instance_id].get('terminal')
                    if terminal and hasattr(terminal, 'output'):
                        return terminal.output.get('1.0', 'end-1c')
            
            return "Terminal output not available"
            
        except Exception as e:
            return f"Error getting terminal output: {e}"
    
    def send_terminal_command(self, process_type, instance_id, command):
        """Send command to terminal"""
        try:
            if process_type in self.launcher_gui.process_instance_tabs:
                instances = self.launcher_gui.process_instance_tabs[process_type]
                if instance_id < len(instances):
                    terminal = instances[instance_id].get('terminal')
                    proc = instances[instance_id].get('proc')
                    
                    if terminal and proc and proc.poll() is None:
                        # Send command to process
                        proc.stdin.write(command + '\n')
                        proc.stdin.flush()
                        return {'success': True, 'message': f'Sent command: {command}'}
            
            return {'error': 'Process not available or not running'}
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_application_logs(self):
        """Get application logs"""
        try:
            log_file = os.path.join(os.path.dirname(__file__), 'launcher_log.txt')
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = f.readlines()
                return logs[-100:]  # Last 100 lines
            else:
                return ["No log file found"]
        except Exception as e:
            return [f"Error reading logs: {e}"]
    
    def get_performance_analytics(self):
        """Get performance analytics"""
        try:
            analytics = {
                'timestamp': datetime.now().isoformat(),
                'system': {
                    'cpu_percent': psutil.cpu_percent(interval=1),
                    'memory_percent': psutil.virtual_memory().percent,
                    'disk_usage': psutil.disk_usage('/').percent
                },
                'processes': self.get_process_status(),
                'launcher_memory': self.get_launcher_memory_usage()
            }
            return analytics
        except Exception as e:
            return {'error': str(e)}
    
    def get_process_uptime(self, terminal):
        """Get process uptime"""
        try:
            if terminal and hasattr(terminal, 'start_time'):
                elapsed = int(time.time() - terminal.start_time)
                h, m, s = elapsed // 3600, (elapsed % 3600) // 60, elapsed % 60
                return f"{h:02}:{m:02}:{s:02}"
            return "Unknown"
        except:
            return "Unknown"
    
    def get_process_cpu(self, proc):
        """Get process CPU usage"""
        try:
            if proc and proc.poll() is None:
                p = psutil.Process(proc.pid)
                return f"{p.cpu_percent(interval=0.1):.1f}%"
            return "N/A"
        except:
            return "N/A"
    
    def get_process_memory(self, proc):
        """Get process memory usage"""
        try:
            if proc and proc.poll() is None:
                p = psutil.Process(proc.pid)
                mem_mb = p.memory_info().rss / (1024 * 1024)
                return f"{mem_mb:.1f} MB"
            return "N/A"
        except:
            return "N/A"
    
    def get_system_info(self):
        """Get system information"""
        try:
            return {
                'cpu_count': psutil.cpu_count(),
                'memory_total': f"{psutil.virtual_memory().total / (1024**3):.1f} GB",
                'disk_total': f"{psutil.disk_usage('/').total / (1024**3):.1f} GB",
                'platform': sys.platform,
                'python_version': sys.version
            }
        except Exception as e:
            return {'error': str(e)}
    
    def get_launcher_memory_usage(self):
        """Get launcher memory usage"""
        try:
            process = psutil.Process()
            mem_mb = process.memory_info().rss / (1024 * 1024)
            return f"{mem_mb:.1f} MB"
        except:
            return "Unknown"
    
    def monitor_processes(self):
        """Monitor processes and emit updates"""
        while self.monitoring_active:
            try:
                status = self.get_process_status()
                self.socketio.emit('process_update', status)
                time.sleep(2)  # Update every 2 seconds
            except Exception as e:
                print(f"Error in process monitoring: {e}")
                time.sleep(5)
    
    def start(self):
        """Start the web interface"""
        print(f"Starting Z-Waifu Launcher Web Interface on http://{self.host}:{self.port}")
        
        # Open browser
        try:
            webbrowser.open(f"http://{self.host}:{self.port}")
        except:
            pass
        
        # Start Flask app
        self.socketio.run(self.app, host=self.host, port=self.port, debug=False)
    
    def stop(self):
        """Stop the web interface"""
        self.monitoring_active = False
        print("Web interface stopped")

def create_web_interface(launcher_gui, host='127.0.0.1', port=8080):
    """Create and start web interface"""
    try:
        web_interface = WebInterface(launcher_gui, host, port)
        return web_interface
    except Exception as e:
        print(f"Error creating web interface: {e}")
        return None

if __name__ == "__main__":
    # Test web interface
    print("Z-Waifu Launcher Web Interface")
    print("This module provides web-based management for the launcher.")
    print("To use, import and call create_web_interface() with your launcher instance.") 